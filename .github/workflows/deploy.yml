name: Deploy Next.js application

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "BKASH_API_KEY=${{ secrets.BKASH_API_KEY }}" >> .env
          echo "BKASH_CREATE_PAYMENT_URL=${{ secrets.BKASH_CREATE_PAYMENT_URL }}" >> .env
          echo "BKASH_EXECUTE_PAYMENT_URL=${{ secrets.BKASH_EXECUTE_PAYMENT_URL }}" >> .env
          echo "BKASH_GRANT_TOKEN_URL=${{ secrets.BKASH_GRANT_TOKEN_URL }}" >> .env
          echo "BKASH_PASSWORD=${{ secrets.BKASH_PASSWORD }}" >> .env
          echo "BKASH_REFUND_TRANSACTION_URL=${{ secrets.BKASH_REFUND_TRANSACTION_URL }}" >> .env
          echo "BKASH_SECRET_KEY=${{ secrets.BKASH_SECRET_KEY }}" >> .env
          echo "BKASH_USERNAME=${{ secrets.BKASH_USERNAME }}" >> .env
          echo "MIKROTIK_HOST=${{ secrets.MIKROTIK_HOST }}" >> .env
          echo "MIKROTIK_PASSWORD=${{ secrets.MIKROTIK_PASSWORD }}" >> .env
          echo "MIKROTIK_PORT=${{ secrets.MIKROTIK_PORT }}" >> .env
          echo "MIKROTIK_USER=${{ secrets.MIKROTIK_USER }}" >> .env
          echo "MONGO_URL=${{ secrets.MONGO_URL }}" >> .env
          echo "NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}" >> .env
          echo "SMS_API_KEY=${{ secrets.SMS_API_KEY }}" >> .env
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> .env
          echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> .env
          echo "NEXT_PUBLIC_MIKROTIK_LOGIN_DNS_IP=${{ secrets.NEXT_PUBLIC_MIKROTIK_LOGIN_DNS_IP }}" >> .env
          echo "DEVICE_SECRET_KEY=${{ secrets.DEVICE_SECRET_KEY }}" >> .env
          echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> .env
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> .env
          echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> .env

      - name: Archive .env file
        run: tar -czf env.tar.gz .env

      - name: Build Docker image
        run: docker build -t prominhaj/wifi-hotspot:latest .

      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Publish image to Docker Hub
        run: docker push prominhaj/wifi-hotspot:latest

      - name: Upload environment file
        uses: actions/upload-artifact@v4
        with:
          name: env-file
          path: env.tar.gz

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Download environment file
        uses: actions/download-artifact@v4
        with:
          name: env-file
          path: .

      - name: Extract environment file
        run: tar -xzf env.tar.gz

      - name: Check Disk Space
        run: df -h

      - name: Stop and remove old container if exists
        run: |
          if [ $(docker ps -q -f name=wifi-hotspot-container) ]; then
            docker stop wifi-hotspot-container
            docker rm wifi-hotspot-container
          fi

      - name: Remove old Docker images
        run: docker rmi -f $(docker images -q) || true

      - name: Free up Docker space
        run: |
          docker system prune -af || true
          docker volume prune -f || true

      - name: Pull image from Docker Hub
        run: docker pull prominhaj/wifi-hotspot:latest

      - name: Run Docker container
        run: docker run -d -p 3000:3000 --env-file .env --name wifi-hotspot-container prominhaj/wifi-hotspot:latest
